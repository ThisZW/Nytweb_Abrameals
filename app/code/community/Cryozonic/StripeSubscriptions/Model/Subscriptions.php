<?php
/**
 * Cryozonic
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Single Domain License
 * that is available through the world-wide-web at this URL:
 * http://cryozonic.com/licenses/stripe.html
 * If you are unable to obtain it through the world-wide-web,
 * please send an email to info@cryozonic.com so we can send
 * you a copy immediately.
 *
 * @category   Cryozonic
 * @package    Cryozonic_StripeSubscriptions
 * @copyright  Copyright (c) Cryozonic Ltd (http://cryozonic.com)
 */
require_once 'Cryozonic/Stripe/lib/Stripe.php';

class Cryozonic_StripeSubscriptions_Model_Subscriptions extends Cryozonic_Stripe_Model_Standard
    implements Mage_Payment_Model_Recurring_Profile_MethodInterface
{
    protected $_canManageRecurringProfiles = true;

    private $_rollback = array();
    private $_orderComments = array();

    public function __construct()
    {
        parent::__construct();

        $this->useStoreCurrency = Mage::getStoreConfig('payment/cryozonic_stripe/use_store_currency');

        if ($this->isFrontEndSubscriptionPurchase())
        {
            $this->saveCards = $this->hasRecurringProducts = true;
            $this->ensureStripeCustomer();
        }
    }

    public function assignData($data)
    {
        if ($this->hasRecurringProducts())
            $data['cc_save'] = 1;

        parent::assignData($data);

        if ($this->hasRecurringProducts())
        {
            if (!$this->getCustomerStripeId())
            {
                $this->ensureStripeCustomer();
            }

            if ($this->saveCards && !empty($data['cc_saved']) && $data['cc_saved'] != 'new_card')
            {
                $cu = $this->getStripeCustomer($this->getCustomerStripeId());
                if ($cu->default_card != $data['cc_saved'])
                {
                    $cu->default_card = $data['cc_saved'];
                    $cu->save();
                }
            }
        }

        return $this;
    }

    private function hasRecurringProducts()
    {
        if (isset($this->hasRecurringProducts))
            return $this->hasRecurringProducts;

        $items = $this->getSessionQuote()->getAllItems();
        foreach ($items as $item)
        {
            if ($item->getProduct()->isRecurring())
                return $this->hasRecurringProducts = true;
        }
        return $this->hasRecurringProducts = false;
    }

    protected function isFrontEndSubscriptionPurchase()
    {
        return !Mage::app()->getStore()->isAdmin() && $this->hasRecurringProducts();
    }

    // Don't capture a second online payment when..
    protected function shouldProcessPayment($payment)
    {
        return
            // ..a recurring order event was generated by Stripe
            !Mage::helper('cryozonic_stripesubscriptions')->isRecurringOrder($payment->getOrder()) &&

            // ..a customer purchases a subscription and we automatically create an invoice
            !$this->isFrontEndSubscriptionPurchase() &&

            // ..an admin places an order from the back office which contains a single subscription product
            !$this->isBackEndSubscriptionPurchase();
    }

    protected function isBackEndSubscriptionPurchase()
    {
        return Mage::app()->getStore()->isAdmin() && $this->hasRecurringProducts();
    }

    // When an order contains both a subscription and a virtual product,
    // magento does not set the correct order totals when spliting the order into two
    public function fixOrderWithVirtualProducts(&$payment, &$amount)
    {
        $order = $payment->getOrder();
        $quote = $order->getQuote();
        if ($quote->getVirtualItemsQty() > 0)
        {
            $order->setSubtotal($quote->getSubtotal());
            $order->setBaseSubtotal($quote->getBaseSubtotal());
            $order->setBaseSubtotalInclTax($quote->getBaseSubtotalInclTax());
            $order->setSubtotalInclTax($quote->getSubtotalInclTax());
            $order->setBaseGrandTotal($amount = $quote->getBaseGrandTotal());
            $order->setGrandTotal($quote->getGrandTotal());
        }
    }

    public function authorize(Varien_Object $payment, $amount)
    {
        if (!$this->shouldProcessPayment($payment))
            return $this;

        if ($amount == 0)
            $this->fixOrderWithVirtualProducts($payment, $amount);

        parent::authorize($payment, $amount);

        return $this;
    }

    public function capture(Varien_Object $payment, $amount)
    {
        if (!$this->shouldProcessPayment($payment))
            return $this;

        if ($amount == 0)
            $this->fixOrderWithVirtualProducts($payment, $amount);

        parent::capture($payment, $amount);

        return $this;
    }

    /**
     * Validate RP data
     *
     * @param Mage_Payment_Model_Recurring_Profile $profile
     */
    public function validateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile)
    {
        // Interval must be week, month or year
        // Mage::log('validateRecurringProfile');
    }

    /**
     * Submit RP to the gateway
     *
     * @param Mage_Payment_Model_Recurring_Profile $profile
     * @param Mage_Payment_Model_Info $paymentInfo
     */
    public function submitRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile, Mage_Payment_Model_Info $paymentInfo)
    {
        // Mage::log('submitRecurringProfile');
        $customerStripeId = $this->getCustomerStripeId();

        // Verify coupon code if any
        $couponCode = $profile->getQuote()->getCouponCode();
        if ($couponCode)
        {
            try
            {
                if (Stripe_Coupon::retrieve($couponCode))
                    $coupon = $this->usedCoupon = $couponCode;
            }
            catch (Exception $e)
            {
                $this->log($e->getMessage());
            }

            if (empty($coupon))
            {
                $quote = $profile->getQuote();
                $quote->setData('coupon_code','')
                    ->setSubtotalWithDiscount($quote->getSubtotal())
                    ->setBaseSubtotalWithDiscount($quote->getBaseSubtotal())
                    ->save();
                $this->_orderComments[] = "<b>Error</b>: The customer tried to use coupon code $couponCode, but we could not retrieve it from Stripe.";
                $couponCode = null;
            }
        }

        // Create the order
        try
        {
            $order = $this->createOrder($profile);
            $profile->addOrderRelation($order->getId());
        }
        catch (Exception $e)
        {
            $this->log("Error while trying to create an order for customer $customerStripeId: ".$e->getMessage());
            $this->rollback();
            $this->notifyTechnicalSupport('create_order_failed');
            Mage::throwException($this->t("The subscription process could not be completed.".$e->getMessage()));
        }

        $quoteItemInfo = $profile->getQuoteItemInfo();
        $details = array(
            'product_id' => $quoteItemInfo->getProductId(),
            'price' => $quoteItemInfo->getPrice(),
            'qty' => $quoteItemInfo->getQty(),
            'billing_amount' => $profile->getBillingAmount(),
            'period_unit' => $profile->getPeriodUnit(),
            'period_frequency' => $profile->getPeriodFrequency(),
            'period_max_cycles' => $profile->getPeriodMaxCycles(),
            'start_datetime' => $profile->getStartDatetime(),
            'schedule_description' => $profile->getScheduleDescription(),
            'suspension_threshold' => $profile->getSuspensionThreshold(),
            'trial_period_unit' => $profile->getTrialPeriodUnit(),
            'trial_period_frequency' => $profile->getTrialPeriodFrequency(),
            'trial_period_max_cycles' => $profile->getTrialPeriodMaxCycles(),
            'trial_billing_amount' => $profile->getTrialBillingAmount(),
            'currency_code' => $profile->getCurrencyCode(),
            'shipping_amount' => 0,//$profile->getShippingAmount(),
            'tax_amount' => 0,//$profile->getTaxAmount(),
            'init_amount' => $profile->getInitAmount(),
            'order' => $order,
            'quote_item_info' => $quoteItemInfo
            );

        // Validate the billing period
        switch ($details['period_unit'])
        {
            case 'day':
            case 'week':
            case 'month':
            case 'year':
                break;
            default:
                $this->notifyTechnicalSupport('period_unit_wrong');
                Mage::throwException($this->t('Could not complete subscription because of an invalid billing period unit!'));
                break;
        }

        // Create a plan if it doesn't exist
        $planId = $this->generatePlanId($details);
        $plan = $this->getStripePlan($planId);
        if (!$plan) {
            $plan = $this->createStripePlan($details);
        }

        // Retrieve the customer object
        $customer = $this->getStripeCustomer($customerStripeId);
        if (!$customer && Mage::app()->getStore()->isAdmin())
        {
            // We get in here when trying to create a back office subscription order with
            // a customer that does not yet exist in our Stripe account.
            $customer = $this->createStripeCustomer();
            $data = $paymentInfo->getData();
            $this->saveCards = $data['cc_save'] = 1;
            $this->assignData($data);
        }
        else if (!$customer)
            Mage::throwException($this->t("The subscription process could not be completed."));
        $this->_rollback['customer'] = $customer;

        // Charge additional fees
        $ac = $this->getAmountCurrency($details);
        if ($ac['initial_fee'] && $ac['initial_fee'] > 0)
        {
            try
            {
                $params = array(
                    'customer' => $customer->id,
                    'amount' => $ac['initial_fee'],
                    'currency' => $ac['currency'],
                    'description' => 'Initial fee for order #'.$order->getRealOrderId()
                );
                $invoiceItem = Stripe_InvoiceItem::create($params);
                $this->_rollback['invoice_item'] = $invoiceItem;
            }
            catch (Exception $e)
            {
                $this->log("Error while trying to create invoice item: ".$e->getMessage());
                $this->rollback();
                Mage::throwException($this->t("The subscription process could not be completed." . $e->getMessage()));
            }
        }

        // Subscribe the customer
        try 
        {
            $trialDays = $this->getTrialDays($details);
			///7-28 by Chris, create a one-time payment for subscribers immeadiately after the register of subscription plan, and he won't be charged for next week.
			/*  $create_params  = array(
				'currency'	=>	'USD',
				'amount'	=>	$details['price'],
				'card'		=>	$paymentInfo->getAdditionalInformation()->getToken(),
				'description' =>	'Subscription First Period Payment',
				'capture'	=>	1,
				'receipt_email' =>	$paymentInfo->getMethodInstance()->getCustomerEmail(),
				'customer'	=>	$customerStripeId,
			); */
			$create_params  = array(
				'currency'	=>	$details['currency_code'],
				'amount'	=>	$details['price'] * 100,
				'card'		=>	$paymentInfo->getAdditionalInformation('token'),
				'description' =>	'Subscription First Week Payment',
				'capture'	=>	true,
				'receipt_email' =>	$paymentInfo->getMethodInstance()->getCustomerEmail(),
				'customer'	=>	$customerStripeId,
				);
			
			Stripe_Charge::create($create_params);
			//Mage::throwException($this->t((string)(array)$paymentInfo));	
			//Mage::log($paymentInfo->debug(), Zend_log::DEBUG,  'create_params.log', true);
			
			$subscription = $this->subscribeCustomer($customer, $plan->id, $details['qty'], $trialDays, $paymentInfo, $couponCode);
            $this->_rollback['subscription'] = $subscription;
            $profile->setReferenceId($subscription->id);
            $profile->setState(Mage_Sales_Model_Recurring_Profile::STATE_ACTIVE);
            $profile->setCustomerId($order->getCustomerId());
						
			$group = Mage::getStoreConfig("payment/cryozonic_stripesubscriptions/scgroup");
			
			$customerId = $order->getCustomerId();
			
			$resource = Mage::getSingleton('core/resource');
			
			$writeConnection = $resource->getConnection('core_write');
			
			$query = "UPDATE `customer_entity` SET group_id = " . (int)$group . " WHERE entity_id = " . (int)$customerId;
			
			Mage::log($query, Zend_log::DEBUG, 'subtest.log', true);
			
			$writeConnection->query($query);
			/* object save not working, use direct sql instead
			$mgCustomer = Mage::getModel('customer/customer')->load($profile->getCustomerId());
			
			$mgCustomer->setGroupId($group);
			            
			Mage::log($mgCustomer,Zend_log::DEBUG, 'subtest.log', true);
			
			try{
				$mgCustomer->save();
			}
			catch (Exception $e){
				Mage::log($e, Zend_log::DEBUG, 'subtest2.log', true);
			}
            // $profile->setState(Mage_Sales_Model_Recurring_Profile::STATE_PENDING);
			*/
        }
        catch (Exception $e)
        {
            // Poor man's way of checking for the error code
            $message = $e->getMessage();
            if (preg_match('/with currency (\w+)$/', $message, $matches))
            {
                $currency = strtoupper($matches[1]);
                $this->rollback();
                Mage::throwException('Your account has been configured to use a different currency. Please complete the purchase in the currency: '.$currency);
            }

            $this->log("Error while trying to subscribe customer $customerStripeId to plan {$plan->id}: ".$e->getMessage());
            $this->rollback();
            $this->notifyTechnicalSupport('subscribe_customer_failed');
            Mage::throwException($this->t("The subscription process could not be completed." . $e->getMessage()));
        }

        try
        {
            // Add a comment on the order about this subscription
            $comment = "Customer $customerStripeId has been subscribed to plan $planId.";

            // Make a note of any coupons used in this order
            $coupon = $this->usedCoupon; // Because __isset() is not implemented
            if (!empty($coupon))
                $comment .= " Coupon code <b>$coupon</b> was used during the checkout for this order.";

            // Add any other comments
            if ($this->_orderComments)
                $comment .= " " . implode(" ", $this->_orderComments);

            // Set the order status
            $status = Mage::getStoreConfig('payment/cryozonic_stripesubscriptions/recurring_order_status');
            if (empty($status)) $status = Mage_Sales_Model_Order::STATE_COMPLETE;

            $order->addStatusToHistory($status, $comment);

            $order->save();
            $order->sendNewOrderEmail();

            Mage::helper('cryozonic_stripesubscriptions')->invoice($order);
        }
        catch (Exception $e)
        {
            $this->log("Could not change the order status: ".$e->getMessage());
        }

        // Dispatch an event to observers
        Mage::dispatchEvent('sales_order_place_after', array('order' => $order, 'subscribed' => true, 'customer_id' => $order->getCustomerId()));
    }

    protected function getAdditionalFees($details, $bIncludeInitialFee = false)
    {
        $ac = $this->getAmountCurrency($details);

        $total = 0;

        if ($bIncludeInitialFee)
            $total += $ac['initial_fee'];

        return round($total);
    }

    protected function generatePlanId($details)
    {
        $ac = $this->getAmountCurrency($details);

        $pieces = array(
            $details['product_id'],
            $ac['currency'],
            $ac['amount'],
            strtoupper($details['period_unit']),
            $details['period_frequency']
        );

        return implode('-', $pieces);
    }

    protected function getStripePlan($planId)
    {
        try
        {
            return Stripe_Plan::retrieve($planId);
        }
        catch (Stripe_InvalidRequestError $e)
        {
            $this->log($e->getMessage());
        }
        return false;
    }

    protected function getTrialDays($details)
    {
        switch ($details['trial_period_unit']) {
            case null:
                $days = 0;
                break;
            case 'day':
                $days = $details['trial_period_frequency'];
                break;
            case 'week':
			//7-20-2016 by Chris  'fixed' date value to ensure it will forever start on next sunday.
				if ($details['trial_period_frequency'] == 'fixed'){
					$wday = getdate()['wday'];
					$hour = getdate()['hours'];
					if ($hour >= 12 && $wday == 7){
						$days = 7;
					} else {
						$days = 7 - $wday;
					}
				} else {
					$days = $details['trial_period_frequency'] * 7;
                }

				break;
            case 'semi_month':
                $days = $details['trial_period_frequency'] * 14;
                break;
            case 'month':
                $days = $details['trial_period_frequency'] * 30;
                break;
            case 'year':
                $days = $details['trial_period_frequency'] * 356;
                break;
        }
						//Mage::log($days,null,'crontest.log',true);
        return round($days);
    }

    protected function getAmountCurrency($details)
    {
        if ($this->useStoreCurrency)
        {
            $amount = $details['quote_item_info']->getNominalRowTotal() - $details['quote_item_info']->getRecurringInitialFee();
            $currency = $details['order']->getOrderCurrencyCode();
            $rate = $details['order']->getStoreToOrderRate(); // Exchange rate for multi-currency stores
        }
        else
        {
            $amount = $details['quote_item_info']->getBaseNominalRowTotal(); // Magento does not add the initial fee in the base total (╯°□°）╯︵ ┻━┻
            $currency = $details['order']->getBaseCurrencyCode();
            $rate = 1;
        }

        $cents = 100;
        if ($this->isZeroDecimal($currency))
            $cents = 1;

        $total = $amount * $cents;

        // Older version of Magento (e.g 1.6.2.0) do not convert the initial fee by exchange rate (producing wrong front-end totals)
        // but we are being a hero here.
        if (!empty($details['init_amount']) && is_numeric($details['init_amount']))
            $initial = (float)$details['init_amount'] * $cents * $rate;
        else
            $initial = 0;

        return array(
            'amount' => round($total),
            'currency' => $currency,
            'initial_fee' => round($initial),
            'multiplier' => $cents
        );
    }

    protected function createStripePlan($details)
    {
        $planId = $this->generatePlanId($details);
        $this->log("Creating a new plan $planId");

        $ac = $this->getAmountCurrency($details);

        try
        {
            $params = array(
                "id" => $planId,
                "amount" => $ac['amount'],
                "currency" => $ac['currency'],
                "interval" => $details['period_unit'],
                "interval_count" => $details['period_frequency'],
                "name" => $details['schedule_description']
            );

            $response = Stripe_Plan::create($params);

            return $response;
        }
        catch (Exception $e)
        {
            $this->log("Could not set up customer profile: ".$e->getMessage());
            Mage::throwException($this->t('Could not set up customer profile: ').$this->t($e->getMessage()));
        }
    }

    protected function subscribeCustomer($customer, $planId, $qty, $trialDays, Mage_Payment_Model_Info $info, $couponCode)
    {
        try {
            $params = array(
                "plan" => $planId,
                // "quantity" => $qty // We no longer set this because it has been factored into the total price at getAmount()
            );

            if ($couponCode)
                $params['coupon'] = $couponCode;

            // This may be card_ if a saved card was selected
            $token = $info->getAdditionalInformation('token');

            if ($this->saveCards && strpos($token,'card_') === 0)
            {
                // Use the default customer card.
            }
            else if (strpos($token,'tok_') === 0)
            {
                // We may get here for guests and new customers
                // $params['card'] = $token;
            }
            else
            {
                $card = array(
                    "name" => $info->ccOwner,
                    "number" => $info->ccNumber,
                    "cvc" => $info->ccCid,
                    "exp_month" => $info->ccExpMonth,
                    "exp_year" => $info->ccExpYear
                );
                $params['card'] = $this->getAvsFields($card);
            }
			
			//it is already paid at the time purchasing the subscription plan, skip thi week.
			$firstWeek = 24*60*60*7;
			
            if ($trialDays && $trialDays > 0) {
				//calculate time here in order to make everything start from sunday 12.pm.
				$params['trial_end'] = time() + $firstWeek +  $trialDays * 24 * 60 * 60;
            }
			$time = getdate();
			if ($time['hours'] >= 15) {
				$params['trial_end'] -= (($time['hours']-15)*3600 + $time['minutes']*60);
			} else if ($time['hours'] < 15) {
				$params['trial_end'] += ((16-$time['hours'])*3600 + $time['minutes']*60);
			}
            // else
            // {
            //     // We add a 1 minute trial period in case something goes sour
            //     // and we need to cancel the subscription. If we don't a payment
            //     // will go through which must be manually refunded.
            //     $params['trial_end'] = time() + 60;
            // }
			
		//	Mage::log($params, null, 'crontest.log',true);
            return $customer->subscriptions->create($params);
        }
        catch (Exception $e)
        {
            $this->log($e->getMessage());
            Mage::throwException($this->t($e->getMessage()));
        }
    }

    /**
     * Fetch RP details
     *
     * @param string $referenceId
     * @param Varien_Object $result
     */
    public function getRecurringProfileDetails($referenceId, Varien_Object $result)
    {
        // Mage::log('getRecurringProfileDetails');
    }

    /**
     * Whether can get recurring profile details
     */
    public function canGetRecurringProfileDetails()
    {
        // Mage::log('canGetRecurringProfileDetails');
        return false;
    }

    /**
     * Update RP data
     *
     * @param Mage_Payment_Model_Recurring_Profile $profile
     */
    public function updateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile)
    {
        // Mage::log('updateRecurringProfile');
    }

    /**
     * Manage status
     *
     * @param Mage_Payment_Model_Recurring_Profile $profile
     */
    public function updateRecurringProfileStatus(Mage_Payment_Model_Recurring_Profile $profile)
    {
        $customerStripeId = $this->getCustomerStripeId($profile->getCustomerId());
        $customer = $this->getStripeCustomer($customerStripeId);

        // This may happen if we delete the customer from Stripe but they are still subscribed to the plan in Magento
        if (!$customer)
            Mage::throwException($this->t("Could not update subscription because it has been deleted by an administrator."));

        $store = $this->getStore();
        $pauseResumeEnabled = $store->getConfig('payment/cryozonic_stripesubscriptions/pause_resume');

        switch($profile->newState)
        {
            case "suspended":
            case "canceled":
                try
                {
                    $subscription = $customer->subscriptions->retrieve($profile->referenceId);
                    if ($profile->newState == "suspended")
                    {
                        if (!$pauseResumeEnabled)
                            Mage::throwException("Sorry, pausing and resuming subscriptions is not allowed. You can only cancel this subscription.");
                        $quoteItemInfo = $profile->getOrderItemInfo();
                        $quoteItemInfo['cryozonic_stripesubscriptions_plan_id'] = $subscription->plan->id;
                        $quoteItemInfo['cryozonic_stripesubscriptions_remaining_period_time'] = $subscription->current_period_end - time();
                        $profile->setOrderItemInfo($quoteItemInfo);
                        $profile->save();
                    }
                    $subscription->cancel();
                }
                catch (Exception $e)
                {
                    Mage::throwException($e->getMessage());
                }

                // Switch the customer to a different group
                $group = Mage::getStoreConfig("payment/cryozonic_stripesubscriptions/csgroup");
                Mage::helper('cryozonic_stripesubscriptions')->setCustomerGroup($group);

                break;

            case "active":
                if (!$pauseResumeEnabled)
                    Mage::throwException("Sorry, pausing and resuming subscriptions is not allowed. You can only cancel this subscription.");

                $quoteItemInfo = $profile->getOrderItemInfo();

                $params = array(
                    "plan" => $quoteItemInfo['cryozonic_stripesubscriptions_plan_id'], // We assume that the plan has not been deleted
                    "trial_end" => time() + $quoteItemInfo['cryozonic_stripesubscriptions_remaining_period_time']
                );

                try
                {
                    $subscription = $customer->subscriptions->create($params);
                    $startDate = new Zend_Date($params['trial_end'], Zend_Date::TIMESTAMP);
                    $profile->setReferenceId($subscription->id)
                        ->setNearestStartDatetime($startDate)
                        ->save();
                }
                catch (Exception $e)
                {
                    $this->log('Could not activate customer subscription: ' . $e->getMessage());
                    Mage::throwException('Sorry, we could not activate this subscription!');
                }

                // Assign the customer to a group
                $group = Mage::getStoreConfig("payment/cryozonic_stripesubscriptions/scgroup");
                Mage::helper('cryozonic_stripesubscriptions')->setCustomerGroup($group);

                break;
            default:
                break;
        }
    }

    private function createOrder($profile)
    {
        $quoteObj = $profile->getQuote();
        $quoteItemInfo = $profile->getQuoteItemInfo();

        $quoteObj->reserveOrderId();
        $quoteObj->reserveOrderId();
        $quoteObj->reserveOrderId();

        // Set payment method
        $quotePaymentObj = $quoteObj->getPayment(); // Mage_Sales_Model_Quote_Payment
        $quotePaymentObj->setMethod($this->_code);
        $quoteObj->setPayment($quotePaymentObj);

        // Convert quote to order
        $convertQuoteObj = Mage::getSingleton('sales/convert_quote');
        $orderObj = $convertQuoteObj->addressToOrder($quoteObj->getShippingAddress());
        $orderPaymentObj = $convertQuoteObj->paymentToOrderPayment($quotePaymentObj);

        // Convert quote addresses
        $orderObj->setBillingAddress($convertQuoteObj->addressToOrderAddress($quoteObj->getBillingAddress()));
        $orderObj->setShippingAddress($convertQuoteObj->addressToOrderAddress($quoteObj->getShippingAddress()));

        // Set payment options
        $orderObj->setPayment($convertQuoteObj->paymentToOrderPayment($quoteObj->getPayment()));

        $billing_amount = $shipping_amount = $tax_amount = 0;
        $base_billing_amount = $base_shipping_amount = $base_tax_amount = 0;

        // submitRecurringProfile() is called once per recurring profile so we should never create an order with the full set of ordered items.
        $item = $quoteItemInfo;
        // $items = $quoteObj->getAllItems();
        // foreach ($items as $item) {
            // @var $item Mage_Sales_Model_Quote_Item
            $orderItem = $convertQuoteObj->itemToOrderItem($item);

            $options = array();
            if ($productOptions = $item->getProduct()->getTypeInstance(true)->getOrderOptions($item->getProduct())) {
                $options = $productOptions;
            }
            if ($addOptions = $item->getOptionByCode('additional_options')) {
                $options['additional_options'] = unserialize($addOptions->getValue());
            }
            if ($options) {
                $orderItem->setProductOptions($options);
            }
            if ($item->getParentItem()) {
                $orderItem->setParentItem($orderObj->getItemByQuoteItemId($item->getParentItem()->getId()));
            }
            $orderObj->addItem($orderItem);

            $qty = $orderItem->getData('qty_ordered');

            $billing_amount += $orderItem->getPrice() * $qty;
            $base_billing_amount += $orderItem->getBasePrice() * $qty;
            $tax_amount += $orderItem->getTaxAmount();
            $base_tax_amount += $orderItem->getBaseTaxAmount();
        // }

        // The shipping amount is not on the order items so get it from the cart
        $shippingMethod = $quoteObj->getShippingAddress();
        // $items = $shippingMethod->getAllItems();
        // foreach ($items as $item) {
            $shipping_amount += $item->getShippingAmount();
            $base_shipping_amount += $item->getBaseShippingAmount();
        // }

        $orderInfo = $profile->getOrderInfo();
        $rate = $orderInfo['store_to_quote_rate'];
        $initAmount = $profile->getInitAmount() * $rate;
        $baseInitAmount = $profile->getInitAmount();

        $orderObj->setCanShipPartiallyItem(false)
            ->setBaseTaxAmount($base_tax_amount)
            ->setTaxAmount($tax_amount)
            ->setBaseShippingAmount($base_shipping_amount)
            ->setShippingAmount($shipping_amount)
            ->setBaseBillingAmount($base_billing_amount)
            ->setBillingAmount($billing_amount)
            ->setBaseSubtotal($base_billing_amount)
            ->setSubtotal($billing_amount)
            ->setBaseGrandTotal($base_tax_amount + $base_shipping_amount + $base_billing_amount + $baseInitAmount)
            ->setGrandTotal($tax_amount + $shipping_amount + $billing_amount + $initAmount);

        // Set the coupon discount if any
        $couponCode = $quoteObj->getCouponCode();
        if (!empty($couponCode))
        {
            $discountAmount = Mage::helper('cryozonic_stripesubscriptions')->getDiscountAmountFor($couponCode, $orderObj->getGrandTotal());
            $baseDiscountAmount = Mage::helper('cryozonic_stripesubscriptions')->getDiscountAmountFor($couponCode, $orderObj->getBaseGrandTotal());
            $orderObj->setDiscountAmount(-$discountAmount)->setDiscountInvoiced(-$discountAmount);
            $orderObj->setBaseDiscountAmount(-$baseDiscountAmount)->setBaseDiscountInvoiced(-$baseDiscountAmount);
            $orderObj->setGrandTotal($orderObj->getGrandTotal() - $discountAmount);
            $orderObj->setBaseGrandTotal($orderObj->getBaseGrandTotal() - $baseDiscountAmount);
        }
        else
        {
            // We need this in case we are dealing with a coupon code that has been deleted from Stripe
            $orderObj->setDiscountAmount(0);
            $orderObj->setBaseDiscountAmount(0);
            $orderObj->setDiscountDescription(null);
        }

        // Reduce inventory of product
        Mage::getSingleton('cataloginventory/stock')->registerItemSale($orderItem);

        $orderObj->save();

        return $orderObj;
    }

    private function rollback()
    {
        if (empty($this->_rollback) || empty($this->_rollback['customer']))
            return;

        $customer = $this->_rollback['customer'];

        if (!empty($this->_rollback['subscription']))
        {
            $sid = $this->_rollback['subscription']->id;
            $this->log("Rolling back subscription $sid");
            try
            {
                $this->_rollback['subscription']->cancel();
            }
            catch (Exception $e)
            {
                $this->log("Rolling back subscription $sid failed: ".$e->getMessage());
            }
        }

        if (!empty($this->_rollback['invoice_item']))
        {
            $this->_rollback['invoice_item']->delete();
        }
    }

    private function notifyTechnicalSupport($code)
    {

    }

    public function log($msg)
    {
        Mage::log("Stripe Subscriptions - ".$msg);
    }

    public function showSaveCardOption()
    {
        if ($this->hasRecurringProducts)
            return $this->saveCards;

        return ($this->saveCards && !$this->isGuest());
    }
}
?>